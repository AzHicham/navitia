name: Build Navitia Packages For Dev Multi Distributions

on:
  pull_request:
  push:
    branches:
      - dev

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
        matrix:
            distribution: [debian8, debian9, debian10]

    container:
      image: navitia/${{matrix.distribution}}_dev

    steps:
    - uses: actions/checkout@v1
    - name: install zip dependency
      run: apt update && apt install -y zip httpie
    - name: dkpg-buildpackage
      run: |
        sed -i 's,git\@github.com:\([^/]*\)/\(.*\).git,https://github.com/\1/\2,' .gitmodules
        git submodule update --init --recursive
        DEB_BUILD_OPTIONS=nocheck dpkg-buildpackage -b
    - name: create navitia_${{matrix.distribution}}_packages.zip
      run: |
        zip navitia_${{matrix.distribution}}_packages.zip ../navitia-*

    - name: upload ${{matrix.distribution}} packages
      uses: actions/upload-artifact@v1
      with:
        name: navitia-${{matrix.distribution}}-packages
        path: "navitia_${{matrix.distribution}}_packages.zip"
    - name: remove useless temporary files
      run: rm -rf ../navitia-*
    - name: slack notification (the job has failed)
      if: failure() && github.event_name == 'push'
      run: |
          echo '{"text":":warning: Navitia Github Actions: build_navitia_${{matrix.distribution}}_packages_for_dev failed (https://github.com/CanalTP/navitia/actions?query=workflow%3A%22Build+Navitia+Packages+For+Dev+Multi+Distributions%22)"}' | http --json POST ${{secrets.SLACK_NAVITIA_CORE_TEAM_URL}}
  artemis:
    runs-on: ubuntu-latest
    container:
      image: navitia/debian10_dev
    needs: build
    steps:
    - name: install  dependency
      run: apt update && apt install -y httpie
    - name: run artemis NG on push
      if: ${{ github.event_name == 'push' }}
      run: http --ignore-stdin -v -f POST https://${{secrets.JENKINS_NG_TOKEN}}@jenkins-core.canaltp.fr/job/artemis_ng/buildWithParameters event=push navitia_branch=dev
    - name: run artemis NG on pull request
      if: ${{ github.event_name == 'pull_request' }}
      run: http --ignore-stdin -v -f POST https://${{secrets.JENKINS_NG_TOKEN}}@jenkins-core.canaltp.fr/job/artemis_ng/buildWithParameters event=pull_request navitia_branch=${{github.head_ref}}
    - name: run deploy on artemis machine https://jenkins-core.canaltp.fr/job/deploy-navitia
      if: ${{ github.event_name == 'push' }}
      run: http --ignore-stdin -v -f POST https://${{secrets.JENKINS_NG_TOKEN}}@jenkins-core.canaltp.fr/job/deploy-navitia/buildWithParameters PLATFORM=artemis_debian8
  artemisNG:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: Make some space
      run: rm -rf /usr/share/dotnet
    - name: checkout navitia
      uses: actions/checkout@v2
    - name: checkout artemis
      uses: actions/checkout@v2
      with:
        repository: CanalTP/artemis
        path: artemis
    - uses: actions/setup-python@v2
      with:
          python-version: '3.7'
    - name: Pull sub-repos
      env:
        ARTEMIS_GITHUB_TOKEN: ${{ secrets.ARTEMIS_GITHUB_TOKEN }}
      run: |
        rm -rf artemis/navitia-docker-compose && git clone https://$ARTEMIS_GITHUB_TOKEN@github.com/CanalTP/navitia-docker-compose.git --branch master ./artemis/navitia-docker-compose
        rm -rf artemis/artemis_data && git clone https://$ARTEMIS_GITHUB_TOKEN@github.com/CanalTP/artemis_data.git --branch master ./artemis/artemis_data
        rm -rf artemis/artemis_references && git clone https://$ARTEMIS_GITHUB_TOKEN@github.com/AzHicham/artemis_references.git --branch artemis_ng_ga ./artemis/artemis_references
    - name: Build docker image
      env:
        ARTEMIS_GITHUB_TOKEN: ${{ secrets.ARTEMIS_GITHUB_TOKEN }}
      run: cd artemis/navitia-docker-compose/builder_from_package && ./build.sh -o $ARTEMIS_GITHUB_TOKEN -t local -e push -f CanalTP -b dev
    - name: Pull remaining images
      run: cd artemis && make pull_available TAG=local || exit 0
    - name: Start dockers
      run: cd artemis && make start TAG=local || exit 0
    - name: Run Test
      env:
        PYTEST: ''
        PYTEST_ARGS: "--benchmark-json output.json"
      run: cd artemis && make test
    - name: Aggregate logs
      if: ${{ always() }}
      run: cd artemis && make logs TAG=local > logs || exit 0
    - name: Archive Artemis artifacts (logs + ref)
      if: ${{ always() }}
      uses: actions/upload-artifact@v2
      with:
        name: logs-and-ref
        path: |
            artemis/output/**/*
            artemis/junit/*.xml
            artemis/logs
    - name: Store benchmark result
      uses: rhysd/github-action-benchmark@v1
      with:
        # What benchmark tool the output.txt came from
        tool: 'pytest'
        github-token: ${{ secrets.ARTEMIS_GITHUB_TOKEN }}
        auto-push: true
        gh-pages-branch: 'gh-pages'
        benchmark-data-dir-path: 'dev/bench'
        # Where the output from the benchmark tool is stored
        output-file-path: artemis/output.json
        # Workflow will fail when an alert happens
        fail-on-alert: true
        alert-threshold: '150%'
        comment-on-alert: true

