name: Build Navitia Packages For Dev Multi Distributions

on:
  pull_request:
  push:
    branches:
      - dev

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
        matrix:
            distribution: [debian8, debian9, debian10, debian11]

    container:
      image: navitia/${{matrix.distribution}}_dev

    steps:
    - uses: actions/checkout@v1
    - name: install zip dependency
      run: apt update && apt install -y zip httpie dh-python
    - name: dkpg-buildpackage
      run: |
        sed -i 's,git\@github.com:\([^/]*\)/\(.*\).git,https://github.com/\1/\2,' .gitmodules
        git submodule update --init --recursive
        DEB_BUILD_OPTIONS=nocheck dpkg-buildpackage -b
    - name: create navitia_${{matrix.distribution}}_packages.zip
      run: |
        zip navitia_${{matrix.distribution}}_packages.zip ../navitia-* ../mock-kraken*

    - name: upload ${{matrix.distribution}} packages
      uses: actions/upload-artifact@v1
      with:
        name: navitia-${{matrix.distribution}}-packages
        path: "navitia_${{matrix.distribution}}_packages.zip"
    - name: remove useless temporary files
      run: rm -rf ../navitia-*
    - name: slack notification (the job has failed)
      if: failure() && github.event_name == 'push'
      run: |
          echo '{"text":":warning: Navitia Github Actions: build_navitia_${{matrix.distribution}}_packages_for_dev failed (https://github.com/CanalTP/navitia/actions?query=workflow%3A%22Build+Navitia+Packages+For+Dev+Multi+Distributions%22)"}' | http --json POST ${{secrets.SLACK_NAVITIA_CORE_TEAM_URL}}
  artemis:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: install dependency
      run: |
        sudo apt update && sudo apt install -y httpie
        pip3 install requests
    - name: run artemis NG on push
      shell: python3 {0}
      if: ${{ github.event_name == 'push' }}
      run: |
        import json
        import requests

        # replace \n, simple quotes and double quotes by spaces
        translation_table = str.maketrans({ '\n' : ' ', "'" : ' ', '"': ' ' })
        def sanitize(my_string):
          sanitized = my_string.translate(translation_table)
          return sanitized

        with open('${{ github.event_path }}') as file:

          github_dict = json.load(file)

          params = {}
          params["event"] = "push"
          params["navitia_branch"] = "dev"
          params["commit_message"] = sanitize(github_dict['head_commit']['message'])
          params["commit_timestamp"] = github_dict['head_commit']['timestamp']
          params["commit_url"] = github_dict['repository']['html_url']
          params["commit_id"] = github_dict['head_commit']['id']
          params["commit_username"] = github_dict['head_commit']['author']['name']

          secret = "${{secrets.JENKINS_NG_TOKEN}}"

          url = "https://{}@jenkins-core.canaltp.fr/job/artemis_ng/buildWithParameters".format(secret)

          request = requests.post(url, data = params )
          print("Response status code : {}".format(request.status_code) )
          print(request.text)

